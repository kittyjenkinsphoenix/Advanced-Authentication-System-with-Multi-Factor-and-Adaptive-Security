from flask import Blueprint, render_template, redirect, url_for, request, flash, session
from app.models import User
from urllib.parse import urlparse
from flask_login import current_user, login_user, logout_user, login_required
from app import db, limiter
from forms import LoginForm
from datetime import datetime, timedelta, timezone
import logging


main = Blueprint('main', __name__)

@limiter.limit("7 per minute")
@main.route('/login', methods=['GET', 'POST']) 
def login():
    if current_user.is_authenticated:
        return redirect(url_for('index'))
    
    form = LoginForm()
    show_captcha = False
    
    if form.validate_on_submit():
        user = User.query.filter_by(username=form.username.data).first()

        if user and user.locked_until:
            now = datetime.now(timezone.utc)
            if user.locked_until > now:
                time_remaining = user.locked_until - now
                minutes = int(time_remaining.total_seconds() / 60) # Generated By CoPilot
                seconds = int(time_remaining.total_seconds() % 60) # Generated By CoPilot
                flash(f'Account Is Locked. Please Try Again In {minutes} Minutes And {seconds} Seconds.', 'danger')
                return redirect(url_for('main.login'))
            else:
                user.locked_until = None
                db.session.commit()
        
        if user and user.failed_attempts >= 3 and user.failed_attempts < 5:
            show_captcha = True
            if form.recaptcha.errors:
                flash('Please Complete The CAPTCHA Verification Correctly.', 'warning')
                return render_template('login.html', title='Sign In', form=form, show_captcha=show_captcha)
        
        if user is None or not user.check_password(form.password.data):
            if user:
                user.failed_attempts += 1
                
                if user.failed_attempts >= 5:
                    user.locked_until = datetime.now(timezone.utc) + timedelta(minutes=5)
                    user.failed_attempts = 0
                    logging.warning(f'Account Locked For User {user.username} Due To Excessive Failed Login Attempts From IP {request.remote_addr}')
                    flash('Too Many Failed Login Attempts. Account Locked For 5 Minutes.', 'danger')
                    db.session.commit()
                    return redirect(url_for('main.login'))
                
                db.session.commit()
            
            flash('Invalid Username or Password', 'danger')
            return redirect(url_for('main.login'))
        
        user.failed_attempts = 0
        user.locked_until = None
        db.session.commit()
        
        session.clear()  
        login_user(user, remember=False, fresh=True)  
        next_page = request.args.get('next')
        if not next_page or urlparse(next_page).netloc != '':
            next_page = url_for('index')
        return redirect(next_page)
    
    if request.method == 'GET' and form.username.data:
        user = User.query.filter_by(username=form.username.data).first()
        if user and user.failed_attempts >= 3:
            show_captcha = True
    
    return render_template('login.html', title='Sign In', form=form, show_captcha=show_captcha)

@main.route('/dashboard')
def dashboard():
    return render_template('dashboard.html')

@main.route('/logout')
def logout():
    logout_user()
    return redirect(url_for('login'))

